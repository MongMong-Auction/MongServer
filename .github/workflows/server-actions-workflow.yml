# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  # src 이하 파일에서만 Event Trigger 발생
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: mongmong-server-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: mmServer
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: mmServer-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    # ubuntu-20.04 사용
    runs-on: ubuntu-20.04
    environment: production

    steps:
    # 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3
    
    # Java 11 환경 설정
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
      
    # application-secrt.yml 생성
    - name: Set yml file
      run: |
        cd ./src/main/resources
        touch ./application-secret.yml
        echo "${{ secrets.DI_FROM_SECRET }}" > ./application-secret.yml
      shell: bash
    
    # Gradlew 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Gradle 설정
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        # Gradle clean and Build
        arguments: clean build
        
    # AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 빌드 결과물 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .
          
    # S3 버킷에 있는 파일 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
